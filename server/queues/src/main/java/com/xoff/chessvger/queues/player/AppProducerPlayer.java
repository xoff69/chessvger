/*
 * This source file was generated by the Gradle 'init' task
 */

package com.xoff.chessvger.queues.player;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.xoff.chessvger.queues.util.CommonKafka;
import com.xoff.chessvger.queues.util.KafkaConstants;
import java.time.Duration;
import java.util.List;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;

public class AppProducerPlayer implements Runnable {
  @Override
  public void run() {

    System.out.println("Start runAppProducerPlayer");
send();
    System.out.println("avant le consumer player");
    KafkaConsumer consumer =
        CommonKafka.getConsumer(KafkaConstants.TOPIC_RUN_PARSERPLAYER, "xoff-parserplayer");

    ObjectMapper objectMapper = new ObjectMapper();
    while (true) {
      ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));
      //System.out.println("AppProducerPlayer::Start to parse:" + records.count());
      for (ConsumerRecord<String, String> record : records) {
        try {
          String filename = objectMapper.readValue(record.value(), String.class);
          System.out.println("AppProducerPlayer::Start to parse:" + filename);
          manageFile(filename);


        } catch (JsonProcessingException e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }

      }
    }
  }

  /**
   * @param filedir ex "data/players_list_xml_foa.xml"
   */
  private void manageFile(String filedir) {

    Producer<String, String> producer = CommonKafka.getProducer();
    ObjectMapper objectMapper = new ObjectMapper();
System.out.println("managerFile "+filedir);
    PlayerParser playerParser = new PlayerParser();
    List<CommonPlayer> players = playerParser.parse(filedir);
    long id = 1L;
    for (CommonPlayer player : players) {

      player.setId(id++);
      try {
        String jsonPlayer = objectMapper.writeValueAsString(player);
        ProducerRecord<String, String> record =
            new ProducerRecord<>(KafkaConstants.TOPIC_PLAYER, null, jsonPlayer);

        producer.send(record);
        producer.flush();

      } catch (JsonProcessingException e) {
        e.printStackTrace(); // Gestion de l'erreur en cas de problème de conversion
      }
    }
    System.out.println("players in queue: " + players.size());


  }
  private void send() {
    System.out.println(">send");
    Producer<String, String> producer = CommonKafka.getProducer();
    ObjectMapper objectMapper = new ObjectMapper();


      try {
        String jsonSent = objectMapper.writeValueAsString("./data/players_list_xml_foa.xml");
        ProducerRecord<String, String> record =
            new ProducerRecord<>(KafkaConstants.TOPIC_RUN_PARSERPLAYER, null, jsonSent);

        producer.send(record);
        producer.flush();

      } catch (JsonProcessingException e) {
        e.printStackTrace(); // Gestion de l'erreur en cas de problème de conversion
      }

    System.out.println("send<");


  }
}
