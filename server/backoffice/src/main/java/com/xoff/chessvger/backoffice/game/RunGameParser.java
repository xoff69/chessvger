/*
 * This source file was generated by the Gradle 'init' task
 */

package com.xoff.chessvger.backoffice.game;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.xoff.chessvger.backoffice.dao.CommonDao;
import com.xoff.chessvger.backoffice.dao.GameDao;
import com.xoff.chessvger.topic.MessageFromParser;
import com.xoff.chessvger.topic.MessageToParser;
import com.xoff.chessvger.topic.ResultAction;
import com.xoff.chessvger.topic.Topic;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import redis.clients.jedis.Jedis;

public class RunGameParser implements Runnable {

  private final MessageToParser messageToParser ;

  public RunGameParser(MessageToParser messageToParser) {
    this.messageToParser = messageToParser;
  }


  private static void manageFile(MessageToParser messageToParser) throws IOException,SQLException {
    // TODO quelle bd? celle donnee par le nom du schema
    System.out.println("games " + messageToParser);
    GameDao commonGameDao = new GameDao();
    Parser parser = new Parser();
    long start = System.currentTimeMillis();
    List<CommonGame> games = parser.parseDir(new File(messageToParser.getFolderToParse()));

    long finish1 = System.currentTimeMillis();
    long timeElapsed = (finish1 - start) / 1000;
    System.out.println("after parse games done: " + games.size() + ":" + timeElapsed + " s");
    System.out.println("after parse games done: " + messageToParser);
    try (Connection connection = CommonDao.getConnection(messageToParser.getDatabaseName())) {

      long id = commonGameDao.count(connection,messageToParser.getSchema()) + 1;
      for (CommonGame game : games) {

        game.setId(id++);

        try {
          commonGameDao.insertCommonGame(connection,messageToParser.getSchema(),game);
        } catch (SQLException e) {
          throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
          throw new RuntimeException(e);
        }
        // mettre a jour le reconciliation manager
        // envoyer sur les stats browser
        // envoyer game of player
        // List<CoupleZobristMaterial> list = MaterialPositionsUtil.parseMoves2(game.getMoves());
        // PositionMaterialProducer.enqueuePositionMaterial(game.getId(), list);
        //enqueueGameOfAPlayer(game.getId(), game.getWhiteFideId());
        //enqueueGameOfAPlayer(game.getId(), game.getBlackFideId());
        //ReconciliationManager.update(game.getId(), ReconciliationType.GAME);
      }
      long finish2 = System.currentTimeMillis();
      timeElapsed = (finish2 - finish1) / 1000;
      System.out.println("db insert games done " + games.size() + ":" + timeElapsed + " s");
      try (Jedis jedis = new Jedis("redis", 6379)) {
        // TODO a externaliser
        MessageFromParser messageFromParser = new MessageFromParser();
        // TODO
        // private long tenantId;
        //private long correlationId;
messageFromParser.setCorrelationId(messageToParser.getCorrelationId());
messageFromParser.setTenantId(messageFromParser.getTenantId())
;
        messageFromParser.setResult(ResultAction.SUCCESS);
        messageFromParser.setMessage(games.size() + ":" + timeElapsed + " s");
        ObjectMapper objectMapper=new ObjectMapper();

        jedis.publish(Topic.TOPIC_FROM_QUEUE,objectMapper.writeValueAsString(messageFromParser) );
      }
      System.out.println(
          "Apres l envoi: db insert games done " + games.size() + ":" + timeElapsed + " s");
    }
  }

  @Override
  public void run() {

    try {
      manageFile(messageToParser);
    } catch (IOException e) {
      throw new RuntimeException(e);
    } catch (SQLException e) {
      throw new RuntimeException(e);
    }
  }


}
