/*
 * This source file was generated by the Gradle 'init' task
 */

package com.xoff.chessvger.kafka.game;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.xoff.chessvger.chess.board.CoupleZobristMaterial;
import com.xoff.chessvger.kafka.position.PositionMaterialProducer;
import com.xoff.chessvger.kafka.position.MaterialPositionsUtil;
import java.io.File;
import java.util.List;
import com.xoff.chessvger.kafka.util.CommonKafka;
import com.xoff.chessvger.kafka.util.KafkaConstants;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;

public class AppProducerGame {
  public static void main(String[] args) {

    Producer<String, String> producer = CommonKafka.getProducer();
    ObjectMapper objectMapper = new ObjectMapper();

    Parser parser=new Parser();
    List<CommonGame> games= parser.parseDir(new File("data/twic1997"));
    System.out.println("games "+games.size());
    long id=1L;
    for (CommonGame game : games) {

      game.setId(id++);
      // envoyer au productuer

      try {
        String gameJson = objectMapper.writeValueAsString(game);
        ProducerRecord<String, String> record = new ProducerRecord<>(KafkaConstants.TOPIC_GAME, null, gameJson);
        List<CoupleZobristMaterial> list= MaterialPositionsUtil.parseMoves2(game.getMoves());
        producer.send(record);
        producer.flush();
        PositionMaterialProducer.enqueuePositionMaterial(game.getId(),list);

      } catch (JsonProcessingException e) {
        e.printStackTrace(); // Gestion de l'erreur en cas de probl√®me de conversion
      }
    }
    System.out.println("db insert games done "+games.size());
  }

}
