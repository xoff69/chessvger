package com.xoff.chessvger.chess.opening;


import com.xoff.chessvger.common.ParamConstants;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FilenameUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

@Slf4j
@NoArgsConstructor
public class OpeningFactory {


  private static final String OPENING = "opening";


  private static final String ECOCODE = "ecocode";


  private static final String NAME = "name";


  private static final String MOVES = "moves";


  private static Opening opening = null;


  public static List<Opening> loadAll() {
    //    log.info("XmlOpeningFactory.loadAll");
    List listOuvertures = new ArrayList<>();
    DocumentBuilderFactory factory = DocumentBuilderFactory.newDefaultInstance();
    opening = new Opening();

    try (InputStream dis = new FileInputStream(
        FilenameUtils.getFullPath(ParamConstants.OPENING_PATH) +
            FilenameUtils.getName(ParamConstants.OPENING_PATH))) {

      factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
      DocumentBuilder builder = factory.newDocumentBuilder();


      Document document = builder.parse(dis);

      visitNode(document, listOuvertures);
      if (opening != null) {
        listOuvertures.add(opening);
        opening = null;
      }


    } catch (SAXParseException spe) {
      // Error generated by the parser
      log.error(
          "\n** Parsing error" + ", line " + spe.getLineNumber() + ", uri " + spe.getSystemId());
      log.error("   " + spe.getMessage(), spe);

    } catch (SAXException | ParserConfigurationException | IOException sxe) {
      // Error generated by this application
      // (or a parser-initialization error)
      log.error("", sxe);

    }
    // Parser with specified options can't be built
    // I/O error
    //  log.info("XmlOpeningFactory.loadAll:" + listOuvertures.size());
    // Log.endFunc("XmlOpeningFactory.loadAll");
    return listOuvertures;
  }


  private static void visitNode(Node node, List listOuvertures) {
    NodeList list = node.getChildNodes();
    int childCnt = list.getLength();

    if (childCnt > 0) {

      for (int i = 0; i < childCnt; i++) {
        Node next = list.item(i);
        if (next.getNodeType() == Node.ELEMENT_NODE) {
          String nodeName = next.getNodeName();
          String text = getElementText(next);

          if (text != null) {
            if (nodeName.equals(OPENING)) {
              if (opening != null) {
                listOuvertures.add(opening);
              }
              // on part sur une nouvelle partie
              opening = new Opening();
            } else if (nodeName.equals(ECOCODE)) {
              opening.setEco(text);
            } else if (nodeName.equals(NAME)) {
              opening.setName(text);
            } else if (nodeName.equals(MOVES)) {
              visitMovesNode(next);
            }
            visitNode(next, listOuvertures);

          }
        }
      } // fin for
    }

  }


  private static void visitMovesNode(Node next) {

    NodeList list2 = next.getChildNodes();
    int len2 = list2.getLength();

    for (int j = 0; j < len2; j++) {
      Node next2 = list2.item(j);

      String coup = getElementText(next2);

      if (coup != null) {
        opening.getMoves().add(coup);
      }
    }
  }


  private static String getElementText(Node element) {
    Node child = element.getFirstChild();
    String text = null;

    if (child != null) {
      text = child.getNodeValue();
    }
    return text;
  }

}
